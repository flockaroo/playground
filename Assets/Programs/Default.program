// =================================================================================================
$type(vertex-shader)
$include(Common.inc)
// =================================================================================================

uniform mat4 ModelToWorldMatrix;
uniform mat4 ModelToViewMatrix;
uniform mat4 ProjectionMatrix;

uniform vec4 DiffuseMul;
uniform vec4 AmbientAdd;

uniform vec4 RenderParams;

in vec3 Position;
in vec3 Normal;

in vec3 Diffuse;
in vec3 Ambient;

out vec4 renderParams;
out vec3 vertexNormal;
out vec3 vertexNormalWorld;

out vec3 vertexDiffuse;
out vec3 vertexAmbient;
out float vertexAlpha;

void main()
{
    renderParams = RenderParams;
    vertexNormal = normalize(Normal).xyz;
    // FIXME(martinmo): Use inverse transpose of 'ModelToWorldMatrix'
    // FIXME(martinmo): if it contains non-uniform scale
    vertexNormalWorld = normalize((ModelToWorldMatrix * vec4(Normal, 0.0)).xyz);

    vertexDiffuse = Diffuse * DiffuseMul.rgb;
    vertexAmbient = Ambient + AmbientAdd.rgb;
    vertexAlpha = DiffuseMul.a;

    gl_Position = ProjectionMatrix * ModelToViewMatrix * vec4(Position, 1.0);
}

// =================================================================================================
$type(fragment-shader)
$include(Common.inc)
// =================================================================================================

in vec4 renderParams;
in vec3 vertexNormal;
in vec3 vertexNormalWorld;

in vec3 vertexDiffuse;
in vec3 vertexAmbient;
in float vertexAlpha;

out vec4 fragmentColor;

void main()
{
    if (renderParams.x > 0.5)
    {
        fragmentColor = vec4(abs(vertexNormal) * vertexDiffuse, vertexAlpha);
    }
    else if (renderParams.y > 0.5)
    {
        fragmentColor = vec4(vertexDiffuse, vertexAlpha);
    }
    else
    {
        vec3 lightDir = normalize(vec3(0.0, 1.0, -0.7));
        float lambert = max(0.0, dot(vertexNormalWorld, -lightDir));
        fragmentColor = vec4(vertexAmbient + vertexDiffuse * max(0.1, lambert), vertexAlpha);
    }

    //fragmentColor = vec4(0.0);
}
