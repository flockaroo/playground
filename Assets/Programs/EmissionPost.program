// =================================================================================================
$type(vertex-shader)
$include(Common.inc)
// =================================================================================================

uniform mat4 ModelToViewMatrix;
uniform mat4 ProjectionMatrix;

in vec3 Position;
in vec3 Diffusion;

out vec3 texCoord;

void main()
{
    texCoord = Diffusion;
    gl_Position = ProjectionMatrix * ModelToViewMatrix * vec4(Position, 1.0);
}

// =================================================================================================
$type(fragment-shader)
$include(Common.inc)
// =================================================================================================

uniform sampler2D ColorTex;
uniform sampler2D DepthTex;

in vec4 renderParams;
in vec3 texCoord;

out vec4 fragmentColor;

void main()
{
    /*
    float z = texture(DepthTex, texCoord.xy).x;
    z = (0.5 * z) / (200.0 - z * (200.0 - 0.5));
    z = 1.0 - z;
    fragmentColor = vec4(z, z, z, 1.0);
    */

    vec3 smoothed = vec3(0.0, 0.0, 0.0);
    vec2 its = 1.0 / textureSize(ColorTex, 0);
    float size = 3.0;
    float sampleCount = 0.0;
    for (float yOff = -size; yOff <= +size; yOff = yOff + 1.0)
    {
        for (float xOff = -size; xOff <= +size; xOff = xOff + 1.0)
        {
            smoothed += texture(ColorTex, texCoord.xy + its * vec2(xOff, yOff)).rgb;
        }
        sampleCount += 2.0 * size + 1.0;
    }
    fragmentColor = vec4(smoothed / sampleCount, 1.0);

    //fragmentColor = vec4(texture(ColorTex, texCoord.xy).rgb, 1.0);
}
